
205091U_Sadhoon M I A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000883  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063c  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039c  00000000  00000000  0000119f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a1  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021a  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  74:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_slave>:
	}
}

void init_slave(void)
{
	TWAR=0x20;
  7c:	80 e2       	ldi	r24, 0x20	; 32
  7e:	82 b9       	out	0x02, r24	; 2
  80:	08 95       	ret

00000082 <slave_listen>:
}

void slave_listen(void)
{
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
  82:	84 ec       	ldi	r24, 0xC4	; 196
  84:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  86:	06 b6       	in	r0, 0x36	; 54
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <slave_listen+0x4>
}
  8c:	08 95       	ret

0000008e <read_data>:


uint8_t read_data(void)
{
	TWCR=(1<<TWINT)|(1<<TWEA)|(1<<TWEN);
  8e:	84 ec       	ldi	r24, 0xC4	; 196
  90:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <read_data+0x4>
	recv_data=TWDR;
  98:	83 b1       	in	r24, 0x03	; 3
  9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return TWDR;
  9e:	83 b1       	in	r24, 0x03	; 3
}
  a0:	08 95       	ret

000000a2 <servoangle>:


void servoangle(uint8_t pin){
	
	for(uint8_t j=0;j<100;j++){
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	26 c0       	rjmp	.+76     	; 0xf2 <servoangle+0x50>
		PORTB|=(1<<pin);
  a6:	98 b3       	in	r25, 0x18	; 24
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	08 2e       	mov	r0, r24
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <servoangle+0x12>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	0a 94       	dec	r0
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <servoangle+0xe>
  b8:	92 2b       	or	r25, r18
  ba:	98 bb       	out	0x18, r25	; 24
		for(uint8_t i=0;i<10;i++){
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	07 c0       	rjmp	.+14     	; 0xce <servoangle+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	e7 ec       	ldi	r30, 0xC7	; 199
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <servoangle+0x22>
  c8:	00 c0       	rjmp	.+0      	; 0xca <servoangle+0x28>
  ca:	00 00       	nop
  cc:	9f 5f       	subi	r25, 0xFF	; 255
  ce:	9a 30       	cpi	r25, 0x0A	; 10
  d0:	b8 f3       	brcs	.-18     	; 0xc0 <servoangle+0x1e>
			_delay_us(100);
			
		}
		
		PORTB&=~(1<<pin);
  d2:	98 b3       	in	r25, 0x18	; 24
  d4:	20 95       	com	r18
  d6:	29 23       	and	r18, r25
  d8:	28 bb       	out	0x18, r18	; 24
		
		for(uint8_t i=0;i<10;i++){
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	07 c0       	rjmp	.+14     	; 0xec <servoangle+0x4a>
  de:	e7 ec       	ldi	r30, 0xC7	; 199
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <servoangle+0x40>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <servoangle+0x46>
  e8:	00 00       	nop
  ea:	9f 5f       	subi	r25, 0xFF	; 255
  ec:	9a 30       	cpi	r25, 0x0A	; 10
  ee:	b8 f3       	brcs	.-18     	; 0xde <servoangle+0x3c>
}


void servoangle(uint8_t pin){
	
	for(uint8_t j=0;j<100;j++){
  f0:	4f 5f       	subi	r20, 0xFF	; 255
  f2:	44 36       	cpi	r20, 0x64	; 100
  f4:	c0 f2       	brcs	.-80     	; 0xa6 <servoangle+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	ff ef       	ldi	r31, 0xFF	; 255
  f8:	24 e3       	ldi	r18, 0x34	; 52
  fa:	3c e0       	ldi	r19, 0x0C	; 12
  fc:	f1 50       	subi	r31, 0x01	; 1
  fe:	20 40       	sbci	r18, 0x00	; 0
 100:	30 40       	sbci	r19, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <servoangle+0x5a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <servoangle+0x64>
 106:	00 00       	nop
		}
	}
	
	_delay_ms(500);
	
	for(uint8_t j=0;j<100;j++){
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	26 c0       	rjmp	.+76     	; 0x158 <servoangle+0xb6>
		
		PORTB|=(1<<pin);
 10c:	98 b3       	in	r25, 0x18	; 24
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	08 2e       	mov	r0, r24
 114:	02 c0       	rjmp	.+4      	; 0x11a <servoangle+0x78>
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <servoangle+0x74>
 11e:	92 2b       	or	r25, r18
 120:	98 bb       	out	0x18, r25	; 24
		for(uint8_t i=0;i<15;i++){
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	07 c0       	rjmp	.+14     	; 0x134 <servoangle+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	e7 ec       	ldi	r30, 0xC7	; 199
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <servoangle+0x88>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <servoangle+0x8e>
 130:	00 00       	nop
 132:	9f 5f       	subi	r25, 0xFF	; 255
 134:	9f 30       	cpi	r25, 0x0F	; 15
 136:	b8 f3       	brcs	.-18     	; 0x126 <servoangle+0x84>
			_delay_us(100);
		}
		PORTB&=~(1<<pin);
 138:	98 b3       	in	r25, 0x18	; 24
 13a:	20 95       	com	r18
 13c:	29 23       	and	r18, r25
 13e:	28 bb       	out	0x18, r18	; 24
		
		
		for(uint8_t i=0;i<15;i++){
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	07 c0       	rjmp	.+14     	; 0x152 <servoangle+0xb0>
 144:	e7 ec       	ldi	r30, 0xC7	; 199
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <servoangle+0xa6>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <servoangle+0xac>
 14e:	00 00       	nop
 150:	9f 5f       	subi	r25, 0xFF	; 255
 152:	9f 30       	cpi	r25, 0x0F	; 15
 154:	b8 f3       	brcs	.-18     	; 0x144 <servoangle+0xa2>
		}
	}
	
	_delay_ms(500);
	
	for(uint8_t j=0;j<100;j++){
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	44 36       	cpi	r20, 0x64	; 100
 15a:	c0 f2       	brcs	.-80     	; 0x10c <servoangle+0x6a>
	}
	
	
	
	
}
 15c:	08 95       	ret

0000015e <main>:
unsigned char recv_data;
void servoangle(uint8_t pin);
int main(void)
{

	DDRA=0xFF;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
 162:	87 bb       	out	0x17, r24	; 23
	init_slave();
 164:	0e 94 3e 00 	call	0x7c	; 0x7c <init_slave>

	
	while(1)
	{
		
		slave_listen();
 168:	0e 94 41 00 	call	0x82	; 0x82 <slave_listen>
		read_data();
 16c:	0e 94 47 00 	call	0x8e	; 0x8e <read_data>
		
		//for DC motor
		if (recv_data<6)
 170:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 174:	86 30       	cpi	r24, 0x06	; 6
 176:	a0 f4       	brcc	.+40     	; 0x1a0 <main+0x42>
		{PORTA|=1<<(recv_data+1);
 178:	4b b3       	in	r20, 0x1b	; 27
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <main+0x2c>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <main+0x28>
 18e:	cb 01       	movw	r24, r22
 190:	84 2b       	or	r24, r20
 192:	8b bb       	out	0x1b, r24	; 27
			if (recv_data==0)
 194:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 198:	81 11       	cpse	r24, r1
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <main+0x48>
			{PORTA=0;
 19c:	1b ba       	out	0x1b, r1	; 27
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <main+0x48>
			}
		}
		else{
			servoangle(recv_data-6);
 1a0:	86 50       	subi	r24, 0x06	; 6
 1a2:	0e 94 51 00 	call	0xa2	; 0xa2 <servoangle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	7f ef       	ldi	r23, 0xFF	; 255
 1a8:	84 e3       	ldi	r24, 0x34	; 52
 1aa:	9c e0       	ldi	r25, 0x0C	; 12
 1ac:	71 50       	subi	r23, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x4e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x58>
 1b6:	00 00       	nop
 1b8:	d7 cf       	rjmp	.-82     	; 0x168 <main+0xa>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
